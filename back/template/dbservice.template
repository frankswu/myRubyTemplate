import java.util.ArrayList;
import java.util.List;

import android.content.Context;
import android.util.Log;

import com.genertech.framework.dao.BaseDao;
import com.genertech.framework.units.LogUtils;

/**
 * 
 * 
 * @author frankswu
 *
 */
public class <%= key %>DBService {

	private static final String TAG = "<%= key %>DBService";

	public static void insert(Context context, <%= key %>Bean bean) {
		BaseDao dao = new BaseDao(context);
		MySQLiteDBHelper helper = dao.getDbHelper();
		try {
			LogUtils.logStringArray(TAG, "insert", bean.toString());
			helper.insertByBaseResult(bean);
		} catch (Exception e) {
			LogUtils.logException(null, TAG, e);
			throw new RuntimeException(e);
		} finally {
			dao.close();
			if(helper != null){helper.close();}
		}
	}

	public static void update<%= key %>(
			Context context, <%= key %>Bean bean) {
		BaseDao dao = new BaseDao(context);
		String where = " ID = ? ";
		String[] whereArgs = new String[] {bean.getId()};
		MySQLiteDBHelper helper = dao.getDbHelper();
		try {
			helper.updateByBaseResult(bean, where, whereArgs);
		} catch (Exception e) {
			LogUtils.logException(null, TAG, e);
			throw new RuntimeException(e);
		} finally {
			dao.close();
			if(helper != null){helper.close();}
		}
	}

	public static long insert4Map(Context context, Map<String,String> beanMap ) {
		LogUtils.logStringArray(TAG, "insert4Map.beanMap", beanMap.toString());
		long insertRowId = -1;
		<%= key %>Bean bean = new <%= key %>Bean();
		BaseDao dao = new BaseDao(context);
		MySQLiteDBHelper helper = dao.getDbHelper();
		try {
			LogUtils.logStringArray(TAG, "insert", bean.toString());
			insertRowId = helper.insertByBaseResultAndMap(bean, beanMap);
		} catch (Exception e) {
			LogUtils.logException(null, TAG, e);
			throw new RuntimeException(e);
		} finally {
			dao.close();
			if(helper != null){helper.close();}
		}
		LogUtils.logStringArray(TAG, "insert4Map.insertRowId", insertRowId+"");
		return insertRowId;
	}



	public static  <%= key %>Bean get<%= key %>ByBeanMap(Context context, <%= key %>Bean bean) {
		LogUtils.logStringArray(TAG,"get<%= key %>ByBeanMap.bean",bean.toString());
		BaseDao dao = new BaseDao(context);
		ArrayList<<%= key %>Bean> results = new ArrayList<<%= key %>Bean>();
		MySQLiteDBHelper helper = dao.getDbHelper();
		try {
			helper.queryByResultBeanMap(<%= key %>Bean.class, results,  bean, null);
			return (results.isEmpty()) ? null : results.get(0);
		} catch (Exception e) {
			LogUtils.logException(null, TAG, e);
			return null;
		} finally {
			dao.close();
			if(helper != null){helper.close();}
		}
	}

	public static List<<%= key %>Bean> get<%= key %>sByBeanMap(Context context, <%= key %>Bean bean) {
		LogUtils.logStringArray(TAG,"get<%= key %>sByBeanMap.bean",bean.toString());
		BaseDao dao = new BaseDao(context);
		ArrayList<<%= key %>Bean> results = new ArrayList<<%= key %>Bean>();
		MySQLiteDBHelper helper = dao.getDbHelper();
		try {
			helper.queryByResultBeanMap(<%= key %>Bean.class, results,  bean, null);
			LogUtils.logStringArray(TAG,"get<%= key %>sByBeanMap.results.size",results.size()+"");
			return results;
		} catch (Exception e) {
			LogUtils.logException(null, TAG, e);
			return null;
		} finally {
			dao.close();
			if(helper != null){helper.close();}
		}
	}


	public static  <%= key %>Bean get<%= key %>ById(Context context, String id) {
		Log.d(TAG,"get<%= key %>ById");
		BaseDao dao = new BaseDao(context);
		ArrayList<<%= key %>Bean> beans = new ArrayList<<%= key %>Bean>();
		String wheres = " ID = '" + id + "' ";
		MySQLiteDBHelper helper = dao.getDbHelper();
		try {
			helper.query4ResultBean(<%= key %>Bean.class, beans,  wheres, null, null);
			<%= key %>Bean bean =  (beans.isEmpty()) ? null : beans.get(0);
			LogUtils.logStringArray(TAG,"get<%= key %>sByBeanMap.bean",bean.toString());
			return bean;
		} catch (Exception e) {
			LogUtils.logException(null, TAG, e);
			return null;
		} finally {
			dao.close();
			if(helper != null){helper.close();}
		}
	}


	public static  List<<%= key %>Bean> get<%= key %>ByWheres(Context context, String wheres) {
		Log.d(TAG,"get<%= key %>ByWheres");
		BaseDao dao = new BaseDao(context);
		ArrayList<<%= key %>Bean> beans = new ArrayList<<%= key %>Bean>();
//		String wheres = " ID = '" + id + "' ";
		MySQLiteDBHelper helper = dao.getDbHelper();
		try {
			helper.query4ResultBean(<%= key %>Bean.class, beans,  wheres, null, null);
			return beans;
		} catch (Exception e) {
			LogUtils.logException(null, TAG, e);
			return null;
		} finally {
			dao.close();
			if(helper != null){helper.close();}
		}
	}

	public static List<<%= key %>Bean> get<%= key %>ByInOneIds(Context context, String columnName, List<String> ids) {
		Log.d(TAG,"get<%= key %>ByInOneIds");
		ArrayList<<%= key %>Bean> results = new ArrayList<<%= key %>Bean>();
		try {
		        StringBuffer where = null;
		        String roleIds = null;
		        if (ids != null) {
		        	where = new StringBuffer(" " + columnName + " in (");
					for (String id : ids) {
						where.append("'" + id + "',");
					}
					roleIds = where.toString().replaceAll(",$", ")");
				}
		        LogUtils.logStringArray(TAG, "get<%= key %>ByInOneIds.where", roleIds);
				results = getAllByWhere(context,results,roleIds ,null,null);
		} catch (Exception e) {
			LogUtils.logException(null, TAG, e);
			throw new RuntimeException(e);
		}
		Log.d(TAG,"get<%= key %>ByInOneIds.size[" + results.size() + "]");
		return results;
	}


	public static List<<%= key %>Bean> get<%= key %>ByIds(Context context, String[] ids) {
		Log.d(TAG,"get<%= key %>ByIds");
		List<<%= key %>Bean> beans = new ArrayList<<%= key %>Bean>();
		if (ids != null && ids.length != 0) {
			for (int i = 0; i < ids.length; i++) {
			    <%= key %>Bean bean = get<%= key %>ById(context,ids[i]);
			    if(bean != null){
			        beans.add(bean);
				}
			}
		}
		Log.d(TAG,"get<%= key %>ByIds.size[" + beans.size() + "]");
		return beans; 
	}
	
	public static ArrayList<<%= key %>Bean> getAll(Context context) {
		ArrayList<<%= key %>Bean> results = new ArrayList<<%= key %>Bean>();
		try {
		        results = getAllByWhere(context,results,null,null,null);
		} catch (Exception e) {
			LogUtils.logException(null, TAG, e);
			throw new RuntimeException(e);
		}
		return results;

	}
	
	public static ArrayList<<%= key %>Bean> getAllByWhere(Context context,ArrayList<<%= key %>Bean> results, String where,String[] whereArgs, String order) {
		BaseDao dao = new BaseDao(context);
		MySQLiteDBHelper helper = dao.getDbHelper();
		try {
			helper.query4ResultBean(<%= key %>Bean.class, results , where ,null, null);
		} catch (Exception e) {
			LogUtils.logException(null, TAG, e);
			throw new RuntimeException(e);
		} finally {
			dao.close();
			if(helper != null){helper.close();}
		}
		return results;
	}

	public static void delete<%= key %>ByFileId(Context context, String fileId) {
		BaseDao dao = new BaseDao(context);
		String where = " _ID = ? ";
		String[] whereArgs = new String[] {id};
		MySQLiteDBHelper helper = dao.getDbHelper();
		try {
			LogUtils.logStringArray(TAG, "delete<%= key %>ByFileId.bean", id+"");
			<%= key %>Bean bean = new <%= key %>Bean();
			bean.setId(id);
			boolean updateResult = helper.deleteByBaseResult(bean , where, whereArgs);
			LogUtils.logStringArray(TAG, "delete<%= key %>ByFileId.updateResult", updateResult+"");
		} catch (Exception e) {
			LogUtils.logException(null, TAG, e);
			throw new RuntimeException(e);
		} finally {
			dao.close();
			if(helper != null){helper.close();}
		}
	}


}